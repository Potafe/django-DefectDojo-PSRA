// Object to store the selected values for each factor

const factorValues = {
    EaseOfExploit: undefined,
    EaseOfDiscovery: undefined,
    Awareness: undefined,
    Detectability: undefined,
    securityresearcher: undefined,
    advanced_network_threat: undefined,
    outsider: undefined,
    hardware_defects: undefined,
    software_defects: undefined,
    intruder: undefined,
    malicious_code: undefined,
    infrastructure_outage: undefined,
    insider: undefined,
    trusted_insider: undefined,
    clinical_users: undefined,
    system_admins: undefined,
    natural_or_man_made_disaster: undefined,
    engineer: undefined,
    automated_or_remote_access: undefined,
    agent_none: undefined,
    sensitive_data: undefined,
    personal_data: undefined,
    hospital_network: undefined,
    audit_trail_data: undefined,
    configuration: undefined,
    system_software: undefined,
    hardware: undefined,
    removable_media_with_ephi: undefined,
    removable_media: undefined,
    logging_data: undefined,
    product_documentation: undefined,
    personal: undefined,
    product: undefined,
    network: undefined,
    all_data: undefined,
    asset_none: undefined,
    Confidentiality: undefined,
    Integrity: undefined,
    Availability: undefined,
    DeltaLikelihood: undefined,
    DeltaVulnerability: undefined,
    DeltaConfidentiality: undefined,
    DeltaIntegrity: undefined,
    DeltaAvailability: undefined,
    BusinessLikelihood: undefined,
    FinancialDamage: undefined,
    ReputationDamage: undefined,
    RegulatoryNonCompliance: undefined,
    CustomerNonCompliance: undefined,
    PrivacyViolation: undefined
};

// Mapping of unique two-letter codes for each factor
const factorCodes = {
    EaseOfExploit: "EE",
    EaseOfDiscovery: "ED",
    Awareness: "AW",
    Detectability: "DT",
    securityresearcher: "SR",
    advanced_network_threat: "AT",
    outsider: "OS",
    hardware_defects: "HD",
    software_defects: "SF",
    intruder: "IN",
    malicious_code: "MC",
    infrastructure_outage: "IO",
    insider: "IS",
    trusted_insider: "TI",
    clinical_users: "CU",
    system_admins: "SA",
    natural_or_man_made_disaster: "ND",
    engineer: "EN",
    automated_or_remote_access: "AA",
    agent_none: "AG",
    sensitive_data: "SD",
    personal_data: "PD",
    hospital_network: "HN",
    audit_trail_data: "ATD",
    configuration: "CF",
    system_software: "SS",
    hardware: "HW",
    removable_media_with_ephi: "RE",
    removable_media: "RM",
    logging_data: "LD",
    product_documentation: "PDN",
    personal: "PS",
    product: "PR",
    network: "NW",
    all_data: "AD",
    asset_none: "AN",
    Confidentiality: "CI",
    Integrity: "IT",
    Availability: "AV",
    DeltaLikelihood: "DL",
    DeltaVulnerability: "DV",
    DeltaConfidentiality: "DC",
    DeltaIntegrity: "DI",
    DeltaAvailability: "DA",
    BusinessLikelihood: "BL",
    FinancialDamage: "FD",
    ReputationDamage: "RD",
    RegulatoryNonCompliance: "RN",
    CustomerNonCompliance: "CN",
    PrivacyViolation: "PV"
};

// Function to handle checkbox and button changes and update `factorValues`
function updateFactorValue(factor, value, isChecked = true) {
    if (isChecked) {
        factorValues[factor] = value; // Set value if checked or button is clicked
    } else {
        factorValues[factor] = undefined; // Clear value if checkbox is unchecked
    }
}

// Function to update the UI based on the result
function updateScoreUI(result, scoreElementId, scoreClassBase) {
    const scoreElement = document.querySelector(scoreElementId);
    if (!result.success || result[`${scoreClassBase}Score`] === undefined || result[`${scoreClassBase}Severity`] === undefined) {
        showBaseMetricPrompts();
        return;
    }

    hideBaseMetricPrompts();

    // Clear existing severity classes (VL, low, medium, high, veryhigh)
    scoreElement.classList.remove('verylow', 'low', 'medium', 'high', 'veryhigh');

    // Add the new severity class based on the result
    const severityClass = result[`${scoreClassBase}Severity`].toLowerCase().replace(/\s+/g, '');
    scoreElement.classList.add(severityClass);

    // Update the score and severity text in the DOM
    document.getElementById(`${scoreClassBase}Score`).innerText = `${result[`${scoreClassBase}Score`]}`;
    document.getElementById(`${scoreClassBase}Severity`).innerText = `( ${result[`${scoreClassBase}Severity`]} )`;

    // Update vector text in the DOM
     // Update vector string in DOM if element exists
     const vectorStringElem = document.getElementById("vector_string_show");
     const vectorStringInput = document.getElementById("id_vector_string");
     if (vectorStringElem && vectorStringInput) {
        vectorStringElem.innerText = result.VectorString || '';
        vectorStringInput.value = result.VectorString || '';
     } else {
         console.warn("Element #vector_string_show not found in DOM.");
     }
}

// Function to hide base metric prompts
function hideBaseMetricPrompts() {
    const elements = document.querySelectorAll(".needBaseMetrics");
    elements.forEach(el => hide(el));
}

// Function to show base metric prompts
function showBaseMetricPrompts() {
    const elements = document.querySelectorAll(".needBaseMetrics");
    elements.forEach(el => show(el));
}


// General function to calculate score
/*function calculateRiskScore(calculateFunction, scoreClassBase, scoreElementId) {
    const result = calculateFunction(factorValues);
    console.log(result);
    updateScoreUI(result, scoreElementId, scoreClassBase);
}*/

// Event handler for checkbox change
function handleCheckboxChange(checkbox) {
    const factor = checkbox.getAttribute('name');
    const value = checkbox.value;
    updateFactorValue(factor, value, checkbox.checked);
    calculateRiskScores();
}

// Consolidated function to calculate risk scores based on factor values
function calculateRiskScores() {
    // Call the risk score function once and get the result
    const result = OWASP_RRM.calculateRiskScoreFromMetrics(factorValues,factorCodes);
    console.log(result);
    // Update each of the score UIs based on the single result
    updateScoreUI(result, '.vulnerability_score', 'vulnerability');
    updateScoreUI(result, '.initial_risk_score', 'InitialRisk');
    updateScoreUI(result, '.residual_risk_score', 'ResidualRisk');
    updateScoreUI(result, '.business_risk_score', 'BusinessRisk');
}

// Event handler for button clicks in metric groups
function handleButtonClick(button, metric) {
    // Remove the active class from buttons within the same metric group
    metric.querySelectorAll('.btn-scale, .btn-business-likelihood').forEach(btn => btn.classList.remove('active'));

    // Add the active class to the clicked button
    button.classList.add('active');

    // Update the factor value in the object
    const factor = button.getAttribute('data-factor');
    const value = button.getAttribute('value');
    updateFactorValue(factor, value);

    // Calculate scores after each button click
    calculateRiskScores();
}

// Initialize event listeners for checkboxes
function initializeCheckboxListeners() {
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        checkbox.addEventListener('change', () => handleCheckboxChange(checkbox));
    });
}

// Initialize event listeners for metric buttons
function initializeMetricButtonListeners() {
    document.querySelectorAll('.metric').forEach(metric => {
        metric.querySelectorAll('.btn-scale, .btn-business-likelihood').forEach(button => {
            button.addEventListener('click', () => handleButtonClick(button, metric));
        });
    });
}


// Initialize event listeners for all components
function initializeEventListeners() {
    initializeCheckboxListeners();
    initializeMetricButtonListeners();
    
}

// Initialize the entire form logic
function initializeRiskAssessmentForm() {
    initializeEventListeners();
}

// Call the initialization function on DOM content loaded
document.addEventListener('DOMContentLoaded', function () {
    initializeRiskAssessmentForm();
    const vectorString = document.getElementById('id_vector_string')?.value || ''; '';  // Retrieve vector_string
    console.log("In addEventlistner " + vectorString);
    if (vectorString) {
        parseAndSetFactorsFromVector(vectorString);  // Call function to parse and set factors
    }
});


// Below function is used when Risk Assessment is edited 
function parseAndSetFactorsFromVector(vectorString) {
    // Remove the initial "PSRA:1.0" part and trim any whitespace
    const cleanedString = vectorString.replace(/^PSRA:1.0\s*/, '').trim();
    
    // Split the string into individual factor-value pairs
    const factorPairs = cleanedString.split('/');

    factorPairs.forEach(pair => {
        const [factorCode, value] = pair.trim().split(':').map(str => str.trim());

        // Find the corresponding factor name in factorCodes and update factorValues
        const factorName = Object.keys(factorCodes).find(key => factorCodes[key] === factorCode);
        
        if (factorName) {
            factorValues[factorName] = isNaN(value) ? value : Number(value);  // Convert numeric values to numbers
        } else {
            console.warn(`No matching factor found for code: ${factorCode}`);
        }
    });

    // Call function to update the UI based on these values
    updateUIFromFactorValues();
}

// Function to update UI controls based on parsed values
function updateUIFromFactorValues() {
    Object.keys(factorValues).forEach(factor => {
        const value = factorValues[factor];

        // Update buttons if present
        const button = document.querySelector(`button[data-factor="${factor}"][value="${value}"]`);
        if (button) {
            button.classList.add('active');  // Activate the button
        }

        // Update checkboxes if present
        const checkbox = document.querySelector(`input[type="checkbox"][name="${factor}"][value="${value}"]`);
        if (checkbox) {
            checkbox.checked = true;  // Check the checkbox
        }
    });

    calculateRiskScores();  // Calculate scores after updating the UI
}
